---
// src/components/misc/HeroImage.astro
import fs from 'fs';
import path from 'path';

interface Props {
  src: string;
  alt: string;
  class?: string;
  basePath?: string;
}

const { src, alt, class: className, basePath } = Astro.props;

// Check if it's an SVG
const isSvg = src?.endsWith('.svg');

// Try to load SVG content if it's an SVG file
let svgContent = null;
if (isSvg) {
  try {
    // Try multiple possible paths for the SVG
    const possiblePaths = [
      // First check in src/assets/icons (for theme icons)
      path.join(process.cwd(), 'src/assets/icons', src),
      // Then check in the post's directory (for post-specific images)
      basePath ? path.join(process.cwd(), basePath, src) : null,
      // Then check in public directory
      path.join(process.cwd(), 'public', src),
      // Check in content directory
      path.join(process.cwd(), 'src/content/posts', src),
    ].filter(Boolean);

    for (const svgPath of possiblePaths) {
      if (fs.existsSync(svgPath)) {
        svgContent = fs.readFileSync(svgPath, 'utf-8');
        // Replace any hardcoded fill colors with currentColor
        svgContent = svgContent
          .replace(/fill="#[0-9A-Fa-f]{6}"/gi, 'fill="currentColor"')
          .replace(/fill="#[0-9A-Fa-f]{3}"/gi, 'fill="currentColor"')
          .replace(/fill="rgb\([^)]+\)"/gi, 'fill="currentColor"')
          .replace(/fill="rgba\([^)]+\)"/gi, 'fill="currentColor"')
          .replace(/stroke="#[0-9A-Fa-f]{6}"/gi, 'stroke="currentColor"')
          .replace(/stroke="#[0-9A-Fa-f]{3}"/gi, 'stroke="currentColor"');
        
        console.log(`Loaded SVG from: ${svgPath}`);
        break;
      }
    }
    
    if (!svgContent) {
      console.warn(`SVG file not found: ${src}. Tried paths:`, possiblePaths);
    }
  } catch (error) {
    console.error('Error loading SVG:', error);
  }
}

// Build the full image path for non-inline SVGs and regular images
const imagePath = basePath ? `/${basePath}/${src}`.replace(/\/+/g, '/') : src;
---

{svgContent ? (
  <div class={`hero-svg-wrapper ${className || ''}`} aria-label={alt}>
    <Fragment set:html={svgContent} />
  </div>
) : isSvg ? (
  <!-- Fallback: if we couldn't load the SVG content, display it as an image -->
  <div class={`hero-svg-wrapper ${className || ''}`}>
    <img src={imagePath} alt={alt} class="hero-svg" />
  </div>
) : (
  <!-- Regular images -->
  <img src={imagePath} alt={alt} class={className} />
)}

<style>
  .hero-svg-wrapper {
    width: 100%;
    height: 100%;
    color: var(--primary);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .hero-svg-wrapper svg {
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;
  }

  .hero-svg {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: none;
  }

  /* Ensure the SVG uses the theme color */
  .hero-svg-wrapper svg {
    fill: currentColor;
  }
  
  .hero-svg-wrapper svg path,
  .hero-svg-wrapper svg circle,
  .hero-svg-wrapper svg rect,
  .hero-svg-wrapper svg polygon,
  .hero-svg-wrapper svg ellipse {
    fill: currentColor;
  }

  /* For SVGs that use stroke instead of fill */
  .hero-svg-wrapper svg [stroke]:not([stroke="none"]):not([stroke="transparent"]) {
    stroke: currentColor;
  }

  /* Override any filters that might be applied */
  :global(.card-base) .hero-svg-wrapper {
    filter: none !important;
  }

  :global(.card-base) .hero-svg-wrapper svg {
    filter: none !important;
    color: var(--primary) !important;
  }

  /* Dark mode adjustments - slightly transparent for better visibility */
  :global(.dark .card-base) .hero-svg-wrapper svg {
    opacity: 0.9;
  }
  
  /* Ensure good contrast on hover overlays */
  :global(.card-base .group:hover) .hero-svg-wrapper svg {
    filter: brightness(1.2) !important;
  }
</style>